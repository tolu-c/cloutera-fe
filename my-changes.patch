diff --git a/README.md b/README.md
index e215bc4..09c67a2 100644
--- a/README.md
+++ b/README.md
@@ -33,4 +33,5 @@ You can check out [the Next.js GitHub repository](https://github.com/vercel/next
 
 The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
 
+
 Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
diff --git a/src/api/endpoints.ts b/src/api/endpoints.ts
index b21e897..88d9e90 100644
--- a/src/api/endpoints.ts
+++ b/src/api/endpoints.ts
@@ -9,4 +9,11 @@ export const endpoints = {
     logout: "/auth/sign-out",
     checkUsername: "/auth/check-username",
   },
+  profile: {
+    getProfile: "/profile",
+    updateProfile: "/profile/update",
+    changePassword: "/profile/change-password",
+    setup2fa: "/profile/setup-2fa",
+    verify2fa: "/profile/verify-2fa",
+  },
 };
diff --git a/src/app/(customer)/2fa/page.tsx b/src/app/(customer)/2fa/page.tsx
new file mode 100644
index 0000000..56c7773
--- /dev/null
+++ b/src/app/(customer)/2fa/page.tsx
@@ -0,0 +1,19 @@
+import type { Metadata } from "next";
+import TwoFactorAuthClientWrapper from "@/components/profile/2fa/two-factor-auth-wrapper";
+
+export const metadata: Metadata = {
+  title: "Cloutera | 2FA Setup",
+};
+
+const TwoFAPage = () => {
+  return (
+    <div className="flex min-h-screen items-center justify-center bg-gray-100 p-8 font-sans antialiased">
+      <div className="mx-auto w-full">
+        {/* Render the client wrapper which handles fetching user data and the 2FA flow */}
+        <TwoFactorAuthClientWrapper />
+      </div>
+    </div>
+  );
+};
+
+export default TwoFAPage;
diff --git a/src/app/(customer)/profile/page.tsx b/src/app/(customer)/profile/page.tsx
index 6a07767..6188b8c 100644
--- a/src/app/(customer)/profile/page.tsx
+++ b/src/app/(customer)/profile/page.tsx
@@ -10,11 +10,13 @@ export const metadata: Metadata = {
 const ProfilePage = () => {
   return (
     <div className="grid w-full grid-cols-1 lg:grid-cols-2">
+      {/* Left Column for Account Settings and Change Password */}
       <div className="flex w-full flex-col items-start gap-6 p-6 lg:p-8">
         <AccountSettingsForm />
         <ChangePasswordForm />
       </div>
 
+      {/* Right Column for 2FA - now handled by the wrapper client component */}
       <TwoFactorAuthentication />
     </div>
   );
diff --git a/src/components/form/text-input.tsx b/src/components/form/text-input.tsx
index 1c3dd6e..7da6ce5 100644
--- a/src/components/form/text-input.tsx
+++ b/src/components/form/text-input.tsx
@@ -56,7 +56,7 @@ const TextInput = ({
             type={inputType}
             name={name}
             className={cn(
-              "border-grey-300 focus:border-grey-800 placeholder:text-placeholder h-13 w-full rounded-lg border bg-white p-4 text-sm/5 focus:ring-0 focus:outline-none",
+              "border-grey-300 focus:border-grey-800 placeholder:text-placeholder h-13 w-full rounded-lg border bg-white p-4 text-sm/5 focus:ring-0 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50",
               className,
               {
                 "pr-10": rightSection,
diff --git a/src/components/private-route/private-route.tsx b/src/components/private-route/private-route.tsx
index 8c04b55..170f12a 100644
--- a/src/components/private-route/private-route.tsx
+++ b/src/components/private-route/private-route.tsx
@@ -4,6 +4,7 @@ import { useLocalStorage } from "@/hooks";
 import { CLOUTERA_TOKEN } from "@/types/constants";
 import { Fragment, ReactNode, useEffect } from "react";
 import { useRouter } from "next/navigation";
+import { useGetProfile } from "@/queries/profile";
 
 interface PrivateRouteProps {
   children: ReactNode;
@@ -12,6 +13,7 @@ interface PrivateRouteProps {
 export const PrivateRoute = ({ children }: PrivateRouteProps) => {
   const { getItem } = useLocalStorage<string>(CLOUTERA_TOKEN);
   const isLoggedIn = !!getItem();
+  useGetProfile();
 
   const router = useRouter();
 
diff --git a/src/components/profile/2fa/index.tsx b/src/components/profile/2fa/index.tsx
index 8d87082..e073d2d 100644
--- a/src/components/profile/2fa/index.tsx
+++ b/src/components/profile/2fa/index.tsx
@@ -1,22 +1,36 @@
+"use client";
+
 import { ChevronDownIcon, PasswordCheckIcon } from "@/assets/icons";
 import { OutlineCard } from "@/components/ui";
+import React from "react";
+import { useRouter } from "next/navigation";
 
 export const TwoFactorAuthentication = () => {
+  const router = useRouter(); // Initialize the router
+
+  const handleTriggerClick = () => {
+    router.push("/2fa"); // Navigate to the dedicated /2fa page
+  };
   return (
     <div className="w-full p-6 lg:p-8">
       <OutlineCard>
         <OutlineCard.Title title="2 Factor Authentication" />
-
-        <div className="flex w-full items-center justify-between gap-7 bg-white px-4 py-3">
+        <button
+          className="flex w-full items-center justify-between gap-7 rounded-lg bg-white px-4 py-3 transition-colors duration-200 hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none"
+          onClick={handleTriggerClick} // Calls the prop function on click
+        >
           <div className="flex flex-1 items-center gap-4">
-            <span className="bg-foundation-red-light flex size-8 items-center justify-center rounded-full">
-              <PasswordCheckIcon className="text-foundation-red-normal size-5" />
+            <span className="flex size-8 items-center justify-center rounded-full bg-red-100">
+              <PasswordCheckIcon className="size-5 text-red-500" />
             </span>
-            <p className="text-slate-700">Two-factor authentication</p>
+            <p className="text-slate-700">
+              Set up Two-factor authentication{" "}
+              <span className="font-semibold">(For Email)</span>
+            </p>
           </div>
 
           <ChevronDownIcon className="size-6 -rotate-90 text-slate-400" />
-        </div>
+        </button>
       </OutlineCard>
     </div>
   );
diff --git a/src/components/profile/2fa/two-factor-auth-email-selection.tsx b/src/components/profile/2fa/two-factor-auth-email-selection.tsx
new file mode 100644
index 0000000..a92b105
--- /dev/null
+++ b/src/components/profile/2fa/two-factor-auth-email-selection.tsx
@@ -0,0 +1,103 @@
+import { ChevronDownIcon } from "@/assets/icons";
+import { OutlineCard } from "@/components/ui";
+import React, { useState } from "react";
+
+interface TwoFactorAuthEmailSelectionProps {
+  email: string;
+  onContinue: (email: string) => void;
+  onBack: () => void;
+}
+
+export const TwoFactorAuthEmailSelection = ({
+  email,
+  onContinue,
+  onBack,
+}: TwoFactorAuthEmailSelectionProps) => {
+  const [selectedOption, setSelectedOption] = useState<
+    "registered" | "different"
+  >("registered");
+  const [customEmail, setCustomEmail] = useState<string>("");
+
+  const handleContinue = () => {
+    if (selectedOption === "registered") {
+      onContinue(email);
+    } else if (selectedOption === "different" && customEmail) {
+      onContinue(customEmail);
+    } else {
+      console.error("Please enter a valid email address.");
+    }
+  };
+
+  return (
+    <div className="w-full p-6 lg:p-8">
+      <OutlineCard>
+        <div className="flex items-center gap-8">
+          <button
+            className="flex items-center gap-0.5 rounded p-2 text-blue-600 hover:underline focus:ring-2 focus:ring-blue-500 focus:outline-none"
+            onClick={onBack}
+          >
+            <ChevronDownIcon className="size-6 rotate-90 text-slate-400" />
+            <span className="font-medium">Back</span>
+          </button>
+          <OutlineCard.Title title="2 Factor Authentication" />
+        </div>
+
+        <p className="text-slate-700">
+          We&apos;ll send a one-time code via email.
+        </p>
+
+        <div className="space-y-4">
+          {/* Registered Email Option */}
+          <label className="flex cursor-pointer items-center rounded-lg border border-gray-300 bg-white p-4 transition-colors duration-200 hover:border-blue-500">
+            <input
+              type="radio"
+              name="emailOption"
+              value="registered"
+              checked={selectedOption === "registered"}
+              onChange={() => setSelectedOption("registered")}
+              className="form-radio h-4 w-4 border-gray-300 text-blue-600 focus:ring-blue-500"
+            />
+            <span className="ml-3 text-slate-700">
+              Use your registered email{" "}
+              <span className="font-semibold">({email})</span>
+            </span>
+          </label>
+
+          {/* Different Email Option */}
+          <label className="flex cursor-pointer flex-col rounded-lg border border-gray-300 bg-white p-4 transition-colors duration-200 hover:border-blue-500">
+            <div className="flex items-center">
+              <input
+                type="radio"
+                name="emailOption"
+                value="different"
+                checked={selectedOption === "different"}
+                onChange={() => setSelectedOption("different")}
+                className="form-radio h-4 w-4 border-gray-300 text-blue-600 focus:ring-blue-500"
+              />
+              <span className="ml-3 text-slate-700">
+                Use a different email address
+              </span>
+            </div>
+            {selectedOption === "different" && (
+              <input
+                type="email"
+                className="mt-2 block w-full rounded-md border border-gray-300 px-4 py-2 shadow-sm focus:border-blue-500 focus:ring-blue-500 focus:outline-none sm:text-sm"
+                placeholder="Enter email address"
+                value={customEmail}
+                onChange={(e) => setCustomEmail(e.target.value)}
+              />
+            )}
+          </label>
+        </div>
+
+        <button
+          className="rounded-md bg-red-500 px-6 py-3 text-white hover:bg-red-600 focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
+          onClick={handleContinue}
+          disabled={selectedOption === "different" && !customEmail}
+        >
+          Continue
+        </button>
+      </OutlineCard>
+    </div>
+  );
+};
diff --git a/src/components/profile/2fa/two-factor-auth-otp-verification.tsx b/src/components/profile/2fa/two-factor-auth-otp-verification.tsx
new file mode 100644
index 0000000..50cdf0c
--- /dev/null
+++ b/src/components/profile/2fa/two-factor-auth-otp-verification.tsx
@@ -0,0 +1,118 @@
+"use client";
+
+import { ChevronDownIcon } from "@/assets/icons";
+import { OutlineCard } from "@/components/ui";
+import React, { useState, useRef, ChangeEvent, KeyboardEvent } from "react";
+
+interface TwoFactorAuthOTPVerificationProps {
+  email: string; // Email to display for verification
+  onVerify: () => void;
+  onBack: () => void;
+}
+
+export const TwoFactorAuthOTPVerification = ({
+  email,
+  onVerify,
+  onBack,
+}: TwoFactorAuthOTPVerificationProps) => {
+  const [otp, setOtp] = useState<string[]>(["", "", "", "", "", ""]); // 6-digit OTP
+  const inputRefs = useRef<HTMLInputElement[]>([]);
+
+  const handleChange = (e: ChangeEvent<HTMLInputElement>, index: number) => {
+    const { value } = e.target;
+    if (/^[0-9]$/.test(value) || value === "") {
+      // Allow only single digit or empty
+      const newOtp = [...otp];
+      newOtp[index] = value;
+      setOtp(newOtp);
+
+      // Move to next input if a digit is entered
+      if (value !== "" && index < otp.length - 1) {
+        inputRefs.current[index + 1]?.focus();
+      }
+    }
+  };
+
+  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>, index: number) => {
+    // Move to previous input on Backspace if current is empty or at start
+    if (e.key === "Backspace" && otp[index] === "" && index > 0) {
+      inputRefs.current[index - 1]?.focus();
+    }
+  };
+
+  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {
+    e.preventDefault();
+    const pasteData = e.clipboardData.getData("text").slice(0, otp.length);
+    const newOtp = pasteData
+      .split("")
+      .slice(0, otp.length)
+      .map((char) => (/^[0-9]$/.test(char) ? char : ""));
+    setOtp(newOtp.concat(Array(otp.length - newOtp.length).fill(""))); // Fill remaining with empty
+    // Focus on the last filled input or the last input
+    const lastFilledIndex = newOtp.length > 0 ? newOtp.length - 1 : 0;
+    inputRefs.current[lastFilledIndex]?.focus();
+  };
+
+  const isOtpComplete = otp.every((digit) => digit !== "");
+
+  return (
+    <div className="w-full p-6 lg:p-8">
+      <OutlineCard>
+        <div className="flex items-center gap-8">
+          <button
+            className="flex items-center gap-0.5 rounded p-2 text-blue-600 hover:underline focus:ring-2 focus:ring-blue-500 focus:outline-none"
+            onClick={onBack}
+          >
+            <ChevronDownIcon className="size-6 rotate-90 text-slate-400" />
+            <span className="font-medium">Back</span>
+          </button>
+          <OutlineCard.Title title="2 Factor Authentication" />
+        </div>
+
+        <p className="font-semibold text-slate-700">OTP verification</p>
+        <p className="text-slate-700">
+          Enter the 6-digit code sent to your email
+        </p>
+        <p className="font-semibold text-slate-700">{email}</p>
+
+        <div className="flex justify-center space-x-2">
+          {otp.map((digit, index) => (
+            <input
+              key={index}
+              type="text"
+              maxLength={1}
+              value={digit}
+              onChange={(e) => handleChange(e, index)}
+              onKeyDown={(e) => handleKeyDown(e, index)}
+              onPaste={handlePaste}
+              // FIX: Ensure the ref callback returns void
+              ref={(el) => {
+                if (el) {
+                  // Ensure element exists before assigning
+                  inputRefs.current[index] = el;
+                }
+              }}
+              className="h-12 w-10 rounded-md border-2 border-gray-300 text-center text-2xl font-bold transition-colors duration-200 focus:border-blue-500 focus:ring-blue-500 focus:outline-none"
+              style={{ caretColor: "transparent" }} // Hide blinking cursor for cleaner look
+            />
+          ))}
+        </div>
+
+        <div className="text-center text-sm text-gray-600">
+          Don&apos;t receive the code?{" "}
+          <button className="rounded text-blue-600 hover:underline focus:ring-2 focus:ring-blue-500 focus:outline-none">
+            Resend OTP
+          </button>
+        </div>
+
+        <button
+          className="rounded-md bg-red-500 px-6 py-3 text-white hover:bg-red-600 focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
+          onClick={onVerify}
+          disabled={!isOtpComplete}
+        >
+          Verify
+        </button>
+      </OutlineCard>
+    </div>
+  );
+};
diff --git a/src/components/profile/2fa/two-factor-auth-wrapper.tsx b/src/components/profile/2fa/two-factor-auth-wrapper.tsx
new file mode 100644
index 0000000..20a13a5
--- /dev/null
+++ b/src/components/profile/2fa/two-factor-auth-wrapper.tsx
@@ -0,0 +1,16 @@
+"use client";
+
+import { useLocalStorage } from "@/hooks";
+import { CLOUTERA_USER } from "@/types/constants";
+import { User } from "@/types";
+import { TwoFactorAuthenticationFlow } from "./two-factor-authentication-flow";
+
+const TwoFactorAuthClientWrapper = () => {
+  const { getItem } = useLocalStorage<User>(CLOUTERA_USER);
+  const user = getItem();
+  const userEmail = user?.email || "demo.user@example.com";
+
+  return <TwoFactorAuthenticationFlow initialEmail={userEmail} />;
+};
+
+export default TwoFactorAuthClientWrapper;
diff --git a/src/components/profile/2fa/two-factor-authentication-flow.tsx b/src/components/profile/2fa/two-factor-authentication-flow.tsx
new file mode 100644
index 0000000..e5c610b
--- /dev/null
+++ b/src/components/profile/2fa/two-factor-authentication-flow.tsx
@@ -0,0 +1,94 @@
+"use client";
+
+import React, { useState } from "react";
+import { TwoFactorAuthOTPVerification } from "./two-factor-auth-otp-verification";
+import { TwoFactorAuthEmailSelection } from "./two-factor-auth-email-selection";
+import { useRouter } from "next/navigation";
+
+// Define the steps in the 2FA setup flow
+type TwoFactorAuthStep = "emailSelection" | "otpVerification" | "completed";
+
+interface TwoFactorAuthenticationFlowProps {
+  initialEmail: string;
+}
+
+export const TwoFactorAuthenticationFlow = ({
+  initialEmail,
+}: TwoFactorAuthenticationFlowProps) => {
+  const router = useRouter();
+  const [currentStep, setCurrentStep] =
+    useState<TwoFactorAuthStep>("emailSelection");
+  const [selectedEmail, setSelectedEmail] = useState<string>(initialEmail);
+
+  const handleNextStep = (step: TwoFactorAuthStep, email?: string) => {
+    if (email) {
+      setSelectedEmail(email);
+    }
+    setCurrentStep(step);
+  };
+
+  const handleBack = () => {
+    if (currentStep === "emailSelection") {
+      router.push("/profile"); // Navigate back to the profile page
+    } else if (currentStep === "otpVerification") {
+      setCurrentStep("emailSelection");
+    }
+  };
+
+  let content;
+  switch (currentStep) {
+    case "emailSelection":
+      content = (
+        <TwoFactorAuthEmailSelection
+          email={selectedEmail}
+          onContinue={(email) => handleNextStep("otpVerification", email)}
+          onBack={handleBack}
+        />
+      );
+      break;
+    case "otpVerification":
+      content = (
+        <TwoFactorAuthOTPVerification
+          email={selectedEmail}
+          onVerify={() => handleNextStep("completed")}
+          onBack={handleBack}
+        />
+      );
+      break;
+    case "completed":
+      content = (
+        <div className="rounded-lg border border-gray-200 bg-white p-10 text-center shadow-md">
+          <h3 className="mb-4 text-2xl font-bold text-green-600">
+            2FA Setup Complete!
+          </h3>
+          <p className="text-gray-700">
+            Your Two-Factor Authentication has been successfully set up for{" "}
+            {selectedEmail}.
+          </p>
+          <button
+            className="mt-6 rounded-md bg-blue-600 px-6 py-3 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none"
+            onClick={() => router.push("/profile")}
+          >
+            Go Back to Profile
+          </button>
+        </div>
+      );
+      break;
+    default:
+      content = (
+        <div className="rounded-lg border border-gray-200 bg-white p-10 text-center shadow-md">
+          <p className="text-gray-700">
+            Something went wrong. Please try again.
+          </p>
+          <button
+            className="mt-6 rounded-md bg-red-500 px-6 py-3 text-white hover:bg-red-600"
+            onClick={() => router.push("/profile")}
+          >
+            Go Back
+          </button>
+        </div>
+      );
+  }
+
+  return <>{content}</>;
+};
diff --git a/src/components/profile/details/account-settings-form.tsx b/src/components/profile/details/account-settings-form.tsx
index b2e5ada..bebb7e0 100644
--- a/src/components/profile/details/account-settings-form.tsx
+++ b/src/components/profile/details/account-settings-form.tsx
@@ -8,10 +8,17 @@ import { Button, OutlineCard } from "@/components/ui";
 import { TextInput } from "@/components/form";
 import { UsernameAvailability } from "@/components/profile/details/username-availability";
 import { editAccountSchema } from "@/types/schema";
+import { useDeferredValue, useLocalStorage } from "@/hooks";
+import { CLOUTERA_USER } from "@/types/constants";
+import { User } from "@/types";
+import { useUpdateProfile } from "@/mutations/profile/use-update-profile";
 
 type FormData = z.infer<typeof editAccountSchema>;
 
 export const AccountSettingsForm = () => {
+  const { getItem } = useLocalStorage<User>(CLOUTERA_USER);
+  const user = getItem();
+
   const {
     register,
     formState: { errors },
@@ -20,18 +27,19 @@ export const AccountSettingsForm = () => {
   } = useForm<FormData>({
     resolver: zodResolver(editAccountSchema),
     defaultValues: {
-      firstName: "Toluwanimi",
-      lastName: "Adeyemo",
-      email: "webdevtolu@protonmail.com",
-      username: "wdt",
+      firstName: user?.firstName,
+      lastName: user?.lastName,
+      username: user?.username,
     },
   });
 
   const newUsername = watch("username");
+  const deferredUsername = useDeferredValue(newUsername, 500);
+
+  const { isPending, mutateAsync: submit } = useUpdateProfile();
 
   const onSubmit: SubmitHandler<FormData> = async (data) => {
-    console.log(data);
-    // show modal success / notification
+    await submit(data);
   };
 
   return (
@@ -62,17 +70,21 @@ export const AccountSettingsForm = () => {
               error={errors.username?.message}
               {...register("username")}
             />
-            <UsernameAvailability username={newUsername} />
+
+            <UsernameAvailability username={deferredUsername} />
           </div>
 
           <TextInput
             label="Email Address"
-            error={errors.email?.message}
-            {...register("email")}
+            name="email"
+            defaultValue={user?.email}
+            disabled
           />
         </div>
 
-        <Button type="submit">Save Changes</Button>
+        <Button type="submit" disabled={isPending}>
+          Save Changes
+        </Button>
       </form>
     </OutlineCard>
   );
diff --git a/src/components/profile/details/change-password-form.tsx b/src/components/profile/details/change-password-form.tsx
index 6a5413c..c5bfeaf 100644
--- a/src/components/profile/details/change-password-form.tsx
+++ b/src/components/profile/details/change-password-form.tsx
@@ -6,6 +6,7 @@ import { changePasswordSchema } from "@/types/schema";
 import { SubmitHandler, useForm } from "react-hook-form";
 import { zodResolver } from "@hookform/resolvers/zod";
 import { TextInput } from "@/components/form";
+import { useChangePassword } from "@/mutations/profile";
 
 type FormData = z.infer<typeof changePasswordSchema>;
 
@@ -18,9 +19,13 @@ export const ChangePasswordForm = () => {
     resolver: zodResolver(changePasswordSchema),
   });
 
+  const { isPending, mutateAsync: submit } = useChangePassword();
+
   const onSubmit: SubmitHandler<FormData> = async (data) => {
-    console.log(data);
-    // show notification
+    await submit({
+      oldPassword: data.currentPassword,
+      newPassword: data.password,
+    });
   };
 
   return (
@@ -52,7 +57,9 @@ export const ChangePasswordForm = () => {
           {...register("confirmPassword")}
         />
 
-        <Button type="submit">Save Changes</Button>
+        <Button type="submit" disabled={isPending}>
+          Save Changes
+        </Button>
       </form>
     </OutlineCard>
   );
diff --git a/src/components/ui/layout/top-bar.tsx b/src/components/ui/layout/top-bar.tsx
index 67f0d4d..54c5137 100644
--- a/src/components/ui/layout/top-bar.tsx
+++ b/src/components/ui/layout/top-bar.tsx
@@ -9,12 +9,19 @@ import { usePathname } from "next/navigation";
 import { Fragment, useState } from "react";
 import Sidebar from "./side-bar";
 import Image from "next/image";
+import { useLocalStorage } from "@/hooks";
+import { CLOUTERA_USER } from "@/types/constants";
+import { User } from "@/types";
+import Link from "next/link";
 
 const TopBar = () => {
   const pathname = usePathname();
   const pageTitle = pathname.split("/").filter(Boolean).pop() || "";
   const [sidebarOpen, setSidebarOpen] = useState(false);
 
+  const { getItem } = useLocalStorage<User>(CLOUTERA_USER);
+  const user = getItem();
+
   return (
     <Fragment>
       <div className="bg-foundation-red-normal flex h-22 w-full items-center justify-center">
@@ -30,8 +37,13 @@ const TopBar = () => {
               <NotificationIcon className="size-4 text-white" />
             </div>
             <div className="flex items-center gap-2 px-3">
-              <p className="text-base/5 font-medium text-white">Emmanuel</p>
-              <div className="flex items-center gap-2">
+              <p className="text-base/5 font-medium text-white capitalize">
+                {user?.firstName}
+              </p>
+              <Link
+                href="/profile"
+                className="flex cursor-pointer items-center gap-2"
+              >
                 <div className="flex size-10 items-center justify-center rounded-full bg-white">
                   <Image
                     src="/images/user.svg"
@@ -42,7 +54,7 @@ const TopBar = () => {
                   />
                 </div>
                 <ChevronDownIcon className="size-4 text-white" />
-              </div>
+              </Link>
             </div>
           </div>
         </div>
diff --git a/src/hooks/useDeferredValue.ts b/src/hooks/useDeferredValue.ts
index a7c43b5..62d2f3c 100644
--- a/src/hooks/useDeferredValue.ts
+++ b/src/hooks/useDeferredValue.ts
@@ -1,3 +1,5 @@
+"use client";
+
 import { useState, useEffect, useRef } from "react";
 
 export function useDeferredValue<T>(value: T, delay: number = 0): T {
diff --git a/src/hooks/useDisclosure.ts b/src/hooks/useDisclosure.ts
index c600998..f1c56cc 100644
--- a/src/hooks/useDisclosure.ts
+++ b/src/hooks/useDisclosure.ts
@@ -1,3 +1,5 @@
+"use client";
+
 import { useState, useCallback } from "react";
 
 interface UseDisclosureHandlers {
diff --git a/src/hooks/useLocalStorage.ts b/src/hooks/useLocalStorage.ts
index 120f396..fd86061 100644
--- a/src/hooks/useLocalStorage.ts
+++ b/src/hooks/useLocalStorage.ts
@@ -1,3 +1,5 @@
+"use client";
+
 export const useLocalStorage = <T>(key: string) => {
   const getItem = (): T | null => {
     try {
diff --git a/src/mutations/auth/use-login-2fa.ts b/src/mutations/auth/use-login-2fa.ts
index 5ea7ea0..12cd4bf 100644
--- a/src/mutations/auth/use-login-2fa.ts
+++ b/src/mutations/auth/use-login-2fa.ts
@@ -14,7 +14,7 @@ export const useLogin2fa = () => {
   return useMutation({
     mutationFn: userLoginWith2fa,
     onError: handleError,
-    onSuccess: ({ data }) => {
+    onSuccess: async ({ data }) => {
       if (data.isVerified) {
         setItem(data.token);
         router.push("/order");
diff --git a/src/mutations/auth/use-login.ts b/src/mutations/auth/use-login.ts
index 47ed353..0855e16 100644
--- a/src/mutations/auth/use-login.ts
+++ b/src/mutations/auth/use-login.ts
@@ -22,7 +22,7 @@ export const useLogin = () => {
   return useMutation({
     mutationFn: userLogin,
     onError: handleError,
-    onSuccess: ({ data }, variables) => {
+    onSuccess: async ({ data }, variables) => {
       if (data.isVerified) {
         if (data.twoFactorEnabled) {
           setEmail(variables.email);
diff --git a/src/mutations/profile/index.ts b/src/mutations/profile/index.ts
new file mode 100644
index 0000000..87ccfcd
--- /dev/null
+++ b/src/mutations/profile/index.ts
@@ -0,0 +1,2 @@
+export * from "./use-update-profile";
+export * from "./use-change-password";
diff --git a/src/mutations/profile/use-change-password.ts b/src/mutations/profile/use-change-password.ts
new file mode 100644
index 0000000..1e9c7af
--- /dev/null
+++ b/src/mutations/profile/use-change-password.ts
@@ -0,0 +1,13 @@
+import { useProfile } from "@/services/profile";
+import { useError } from "@/hooks";
+import { useMutation } from "@tanstack/react-query";
+
+export const useChangePassword = () => {
+  const { handleChangePassword } = useProfile();
+  const { handleError } = useError();
+
+  return useMutation({
+    mutationFn: handleChangePassword,
+    onError: handleError,
+  });
+};
diff --git a/src/mutations/profile/use-update-profile.ts b/src/mutations/profile/use-update-profile.ts
new file mode 100644
index 0000000..9cf21e8
--- /dev/null
+++ b/src/mutations/profile/use-update-profile.ts
@@ -0,0 +1,18 @@
+import { useProfile } from "@/services/profile";
+import { useError } from "@/hooks";
+import { useMutation, useQueryClient } from "@tanstack/react-query";
+
+export const useUpdateProfile = () => {
+  const { handleUpdateProfile } = useProfile();
+  const { handleError } = useError();
+
+  const queryClient = useQueryClient();
+
+  return useMutation({
+    mutationFn: handleUpdateProfile,
+    onError: handleError,
+    onSuccess: () => {
+      queryClient.invalidateQueries({ queryKey: ["profile"] });
+    },
+  });
+};
diff --git a/src/queries/profile/get-profile.ts b/src/queries/profile/get-profile.ts
new file mode 100644
index 0000000..5c46066
--- /dev/null
+++ b/src/queries/profile/get-profile.ts
@@ -0,0 +1,12 @@
+import { useProfile } from "@/services/profile";
+import { useQuery } from "@tanstack/react-query";
+
+export const useGetProfile = () => {
+  const { handleGetProfile } = useProfile();
+
+  return useQuery({
+    queryKey: ["profile"],
+    queryFn: handleGetProfile,
+    staleTime: Infinity,
+  });
+};
diff --git a/src/queries/profile/index.ts b/src/queries/profile/index.ts
new file mode 100644
index 0000000..66750dc
--- /dev/null
+++ b/src/queries/profile/index.ts
@@ -0,0 +1 @@
+export * from "./get-profile";
diff --git a/src/services/profile.ts b/src/services/profile.ts
new file mode 100644
index 0000000..9cbabf4
--- /dev/null
+++ b/src/services/profile.ts
@@ -0,0 +1,78 @@
+import { useLocalStorage } from "@/hooks";
+import { CLOUTERA_TOKEN, CLOUTERA_USER } from "@/types/constants";
+import { useAxiosApi } from "@/api/api-client";
+import { ApiAuthModes } from "@/types/enums";
+import { endpoints } from "@/api/endpoints";
+import { AxiosResponse } from "axios";
+import {
+  ApiDataResponse,
+  ApiMessageResponse,
+  Profile,
+  Setup2FAData,
+  UpdatePasswordData,
+  UpdateProfileData,
+  User,
+  Verify2FAData,
+} from "@/types";
+
+export const useProfile = () => {
+  const { getItem } = useLocalStorage<string>(CLOUTERA_TOKEN);
+  const { setItem } = useLocalStorage<User>(CLOUTERA_USER);
+
+  const authApi = useAxiosApi(ApiAuthModes.BearerToken, getItem());
+
+  const { getProfile, updateProfile, changePassword, verify2fa, setup2fa } =
+    endpoints.profile;
+
+  const handleGetProfile = async () => {
+    const res: AxiosResponse<ApiDataResponse<Profile>> =
+      await authApi.get(getProfile);
+
+    setItem(res.data.data.user);
+    return res.data;
+  };
+
+  const handleUpdateProfile = async (data: UpdateProfileData) => {
+    const res: AxiosResponse<ApiMessageResponse> = await authApi.post(
+      updateProfile,
+      data,
+    );
+
+    return res.data;
+  };
+
+  const handleChangePassword = async (data: UpdatePasswordData) => {
+    const res: AxiosResponse<ApiMessageResponse> = await authApi.post(
+      changePassword,
+      data,
+    );
+
+    return res.data;
+  };
+
+  const handleSetup2fa = async (data: Setup2FAData) => {
+    const res: AxiosResponse<ApiMessageResponse> = await authApi.post(
+      setup2fa,
+      data,
+    );
+
+    return res.data;
+  };
+
+  const handleVerify2fa = async (data: Verify2FAData) => {
+    const res: AxiosResponse<ApiMessageResponse> = await authApi.post(
+      verify2fa,
+      data,
+    );
+
+    return res.data;
+  };
+
+  return {
+    handleGetProfile,
+    handleUpdateProfile,
+    handleChangePassword,
+    handleSetup2fa,
+    handleVerify2fa,
+  };
+};
diff --git a/src/types/constants.ts b/src/types/constants.ts
index 5f58ab3..a6b49dc 100644
--- a/src/types/constants.ts
+++ b/src/types/constants.ts
@@ -3,3 +3,4 @@ export const ALLOWED_IMAGE_TYPES = ["image/jpeg", "image/jpg", "image/png"];
 export const CLOUTERA_TOKEN = "cloutera.token";
 export const CLOUTERA_USER_EMAIL = "cloutera.user.email";
 export const CLOUTERA_USER_PASSWORD = "cloutera.user.password";
+export const CLOUTERA_USER = "cloutera.user";
diff --git a/src/types/enums.ts b/src/types/enums.ts
index 29b52d5..9336536 100644
--- a/src/types/enums.ts
+++ b/src/types/enums.ts
@@ -26,3 +26,8 @@ export enum ApiAuthModes {
   NoAuth,
   BearerToken,
 }
+
+export enum UserRole {
+  Customer = "Customer",
+  Admin = "Admin",
+}
diff --git a/src/types/index.d.ts b/src/types/index.d.ts
index d8e528e..145f643 100644
--- a/src/types/index.d.ts
+++ b/src/types/index.d.ts
@@ -1,4 +1,4 @@
-import { Status } from "@/types/enums";
+import { Status, UserRole } from "@/types/enums";
 
 interface LabelValuePair<T = string> {
   label: string;
@@ -76,3 +76,38 @@ export interface VerifyAccountData {
   token: string;
   email: string;
 }
+
+export interface User {
+  _id: string;
+  username: string;
+  email: string;
+  firstName: string;
+  lastName: string;
+  isVerified: boolean;
+  role: UserRole;
+  twoFactorEnabled: boolean;
+  __v: number;
+}
+
+export interface Profile {
+  user: User;
+}
+
+export interface UpdateProfileData {
+  firstName: string;
+  lastName: string;
+  username: string;
+}
+
+export interface UpdatePasswordData {
+  oldPassword: string;
+  newPassword: string;
+}
+
+export interface Verify2FAData {
+  secretCode: string;
+}
+
+export interface Setup2FAData {
+  email: string;
+}
diff --git a/src/types/schema.ts b/src/types/schema.ts
index 135a93a..409496e 100644
--- a/src/types/schema.ts
+++ b/src/types/schema.ts
@@ -63,7 +63,6 @@ export const forgotPasswordSchema = z.object({
 
 export const editAccountSchema = signupSchema.pick({
   username: true,
-  email: true,
   firstName: true,
   lastName: true,
 });
